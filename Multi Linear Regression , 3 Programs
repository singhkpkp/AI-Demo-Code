
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.datasets import load_diabetes
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split

data = load_diabetes(as_frame=True)
print(data.keys())
print(data.DESCR)
df = data['frame']
print(df)
plt.hist(df["target"],25)
plt.xlabel("target")
plt.show()
sns.heatmap(data=df.corr().round(2),annot=True)
plt.show()
plt.subplot(1,2,1)
plt.scatter(df['bmi'], df['target'])
plt.xlabel('bmi')
plt.ylabel('target')
plt.subplot(1,2,2)
plt.scatter(df['s5'], df['target'])
plt.xlabel('s5')
plt.ylabel('target')
plt.show()
X = pd.DataFrame(df[['bmi', 's5']], columns=['bmi', 's5'])
y = df['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=5, test_size=0.2)
lm = LinearRegression()
lm.fit(X_train, y_train)
y_train_predict = lm.predict(X_train)
rmse = (np.sqrt(mean_squared_error(y_train, y_train_predict)))
r2 = r2_score(y_train, y_train_predict)
print(f"RMSE = {rmse}, R2 = {r2}")
y_test_predict = lm.predict(X_test)
rmse_test = (np.sqrt(mean_squared_error(y_test, y_test_predict)))
r2_test = r2_score(y_test, y_test_predict)
print(f"RMSE (test) = {rmse_test}, R2 (test)= {r2_test}")

______________________________________________________________________________________________________________________________________________________________________________


import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn.linear_model import Ridge
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
df = pd.read_csv('ridgereg_data.csv')
x = df[['x']]
y = df[['y']]
X_train, X_test, y_train, y_test = train_test_split(x, y, random_state=5, test_size=0.2)
alphas = np.linspace(0, 2, 50)
print(alphas)
r2values =[]
for alp in alphas:
    rr = Ridge(alpha=alp)
    rr.fit(X_train, y_train)
    r2_test = r2_score(y_test, rr.predict(X_test))
    r2values.append(r2_test)
plt.plot(alphas, r2values)
plt.show()
best_r2 = max(r2values)
print(best_r2)
idx = r2values.index(best_r2)
best_apl = alphas[idx]
print(f"Best R2 = {best_r2}, Best alpha = {best_apl}")

_____________________________________________________________________________________________________________________________________________________________________________

import numpy as np
import pandas as pd
from sklearn import linear_model
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
df = pd.read_csv('diamonds.csv')
print(df.head())
X = df[['carat', 'depth', 'table', 'x', 'y', 'z']]
y = df[['price']]
print(X,y)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=5)
alphas = [0.1,0.2,0.3,0.4,0.5,1,2,3,4 ,5,6,7,8]
scores = []
for alp in alphas:
    lasso = linear_model.Lasso(alpha=alp)
    lasso.fit(X_train, y_train)
    #print(lasso.coef_.round(2),lasso.intercept_)
    sc = lasso.score(X_test, y_test)
    scores.append(sc)
    #print("alpha=",alp," lasso score:", sc)
plt.plot(alphas,scores)
plt.show()
best_r2 = max(scores)
idx = scores.index(best_r2)
best_alp = alphas[idx]
print(f"\nBest R2 = {best_r2}, Best alpha = {best_alp}")

